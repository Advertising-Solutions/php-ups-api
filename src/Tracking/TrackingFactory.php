<?php

declare(strict_types=1);

namespace Ups\Tracking;

use Http\Client\Common\Plugin\AddHostPlugin;
use Http\Client\Common\Plugin\AddPathPlugin;
use Http\Client\Common\Plugin\HeaderAppendPlugin;
use Http\Client\Common\PluginClient;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Client\ClientInterface;
use Ups\Api\Tracking\Client;
use Ups\Plugin\AuthenticationPlugin;
use Ups\Plugin\UpsErrorPlugin;

class TrackingFactory
{
    public static function create(string $accessKey, string $userId, string $password, bool $sandbox = true, ClientInterface $httpClient = null): Client
    {
        // Find a default HTTP client if none provided
        if (null === $httpClient) {
            $httpClient = Psr18ClientDiscovery::find();
        }

        $url = $sandbox
            ? 'https://wwwcie.ups.com/track/v1'
            : 'https://onlinetools.ups.com/track/v1';

        // Decorates the HTTP client with some plugins
        $uri = Psr17FactoryDiscovery::findUriFactory()->createUri($url);
        $pluginClient = new PluginClient($httpClient, [
            new UpsErrorPlugin(),
            new AddHostPlugin($uri),
            new AddPathPlugin($uri),
            new AuthenticationPlugin($accessKey, $userId, $password),
            new HeaderAppendPlugin([
                'transId' => uniqid('tracking', true),
                'transactionSrc' => 'PHP Ups Package',
                'Content-Type' => 'application/json',
            ]),
        ]);

        // Instantiate an OpenApi client generated by Jane
        return Client::create($pluginClient);
    }
}
